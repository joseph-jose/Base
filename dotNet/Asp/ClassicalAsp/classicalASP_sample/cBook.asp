<% 

Class cBook

'Private, class member variable
Private m_ID
Private m_ISBN
Private m_Title
Private m_SubTitle
Private m_PublishersName
Private m_PublishedYear
Private m_PageCount
Private m_BindingType
Private m_Authors

'Read the current ID value
Public Property Get ID()
    ID = clng(m_ID)
End Property
'store a new ISBN value
Public Property Let ID(p_Data)
    m_ID = p_Data
End Property 

'Read the current ISBN value
Public Property Get ISBN()
    ISBN = m_ISBN
End Property
'store a new ISBN value
Public Property Let ISBN(p_Data)
    m_ISBN = p_Data
End Property 

'store a new Title value
Public Property Let Title(p_Data)
    m_Title = p_Data
End Property 
'Read the current Title value
Public Property Get Title()
    Title = m_Title
End Property


'Read the current SubTitle value
Public Property Get SubTitle()
    SubTitle = m_SubTitle
End Property
'store a new SubTitle value
Public Property Let SubTitle(p_Data)
    m_SubTitle = p_Data
End Property 


'Read the current PublishersName value
Public Property Get PublishersName()
    PublishersName = m_PublishersName
End Property
'store a new PublishersName value
Public Property Let PublishersName(p_Data)
    m_PublishersName=p_Data
End Property


'Read the current PublishedYear value
Public Property Get PublishedYear()
    PublishedYear = cdate(m_PublishedYear)
End Property
'store a new PublishedYear value
Public Property Let PublishedYear(p_Data)
    m_PublishedYear=(p_Data)
End Property


'Read the current PageCount value
Public Property Get PageCount()
    PageCount = m_PageCount
End Property
'store a new PageCount value
Public Property Let PageCount(p_Data)
    m_PageCount=p_Data
End Property


'Read the current BindingType value
Public Property Get BindingType()
    if m_BindingType <> "" then 
        BindingType = m_BindingType
    else
        BindingType = "unknown binding type"
    end if    
End Property
'store a new BindingType value
Public Property Let BindingType(p_Data)
    m_BindingType=p_Data
End Property


Public Property Get Authors()
    if not isobject(m_Authors) then
        set Library = New cLibrary
        Call Library.GetAuthorsByBookID(Me.ID)
        set m_Authors = Library.Authors
        Set Library = nothing
    end if
    Set Authors = m_Authors
End Property



'#############  Public Functions, accessible to the web pages ##############
    'Loads this object's values by loading a record based on the given ID
    Public Function LoadFromId(p_Id)
        dim strSQL, MyID
        MyID = clng(p_Id)
        strSQL = "SELECT lngBookID, strTitle, strSubTitle, strISBN, strBindingType, "
        strSQL = strSQL & " strPublishersName, strPublishedYear, strPageCount FROM Book "
        strSQL = strSQL &   " WHERE (lngBookID = " & MyID & ") "    
        LoadFromId = LoadData (strSQL)
    End Function

    'Loads this object's values by loading a record based on the given ID
    Public Function LoadFromISBN(p_Id)
        dim strSQL    
        strSQL = "SELECT lngBookID, strTitle, strSubTitle, strISBN, strBindingType, "
        strSQL = strSQL & " strPublishersName, strPublishedYear, strPageCount FROM Book "
        strSQL = strSQL &   " WHERE (strISBN = '" & SingleQuotes(p_Id) & "') "    
        LoadFromId = LoadData (strSQL) 
        LoadFromISBN = LoadData (strSQL)
    End Function
    
    public function storeit()
        echobr store
    end function
    
    
    
            'strSQL="insert into book (strTitle, strSubTitle, strISBN, strBindingType, strPublishersName, strPublishedYear, strPageCount) values ('" & Me.Title & "',   '" & Me.SubTitle & "',    '" & Me.ISBN & "',   '" & Me.BindingType & "',   '" & Me.PublishersName & "',   '" & Me.PublishedYear & "',   '" & Me.PageCount & " ')"         
    public Function Store()
    Dim strSQL
        'If the book has an existing (Autogenerated!) ID, then run an insert
        if Me.ID < 1 then
            Dim ThisRecordID, arr1, arr2
            arr1 = Array("strTitle", "strSubTitle", "strISBN", "strBindingType", "strPublishersName", "strPublishedYear", "strPageCount")
            arr2 = Array(Me.Title,   Me.SubTitle,    Me.ISBN,   Me.BindingType,   Me.PublishersName,   Me.PublishedYear,   Me.PageCount)            
            Me.ID = InsertRecord("Book", "lngBookID", arr1, arr2)            
        'Otherwise run an update
        else        
            strSQL = strSQL & " UPDATE Book SET "
            strSQL = strSQL & " strTitle = '" & SingleQuotes(Me.Title) & "',"
            strSQL = strSQL & " strSubTitle = '" & SingleQuotes(Me.SubTitle) & "',"
            strSQL = strSQL & " strISBN = '" & SingleQuotes(Me.ISBN) & "',"
            strSQL = strSQL & " strBindingType = '" & SingleQuotes(Me.BindingType) & "',"
            strSQL = strSQL & " strPublishersName = '" & SingleQuotes(Me.PublishersName) & "',"
            strSQL = strSQL & " strPublishedYear = '" & SingleQuotes(Me.PublishedYear) & "',"
            strSQL = strSQL & " strPageCount = '" & SingleQuotes(Me.PageCount) & "'"
            strSQL = strSQL & " where lngBookID = " & Me.ID
            RunSQL strSQL            
        End if
        Store =  Me.ID
    End Function
    
    
    Public Function Delete
        strSQL = "DELETE * FROM Book WHERE lngBookID = " & Me.ID
        RunSQL strSQL
    End Function

    Public Sub AddAuthor(p_Author)
        dim Library
        set Library = new cLibrary
        if isObject(p_Author) Then
            cLibrary.AssociateAuthorWithBook p_Author.ID, Me.ID     
        else
            cLibrary.AssociateAuthorWithBook p_Author, Me.ID 
        End if
        Set Library = Nothing
    End Sub

'#############  Private Functions                           ##############

    'Takes a recordset
    'Fills the object's properties using the recordset
    Private Function FillFromRS(p_RS)
        select case p_RS.recordcount
            case 1
                Me.ID                 = p_RS.fields("lngBookID").Value
                Me.Title              = p_RS.fields("strTitle").Value
                Me.SubTitle           = p_RS.fields("strSubTitle").Value
                Me.ISBN               = p_RS.fields("strISBN").Value
                Me.BindingType        = p_RS.fields("strBindingType").Value
                Me.PublishersName     = p_RS.fields("strPublishersName").Value
                Me.PublishedYear      = p_RS.fields("strPublishedYear").Value
                Me.PageCount          = p_RS.fields("strPageCount").Value
                FillFromRS            = Me.ID
            case -1, 0
                'err.raise 2, "Item was not found"
            case else
                err.raise 3, "Item was not unique"            
        end select
    End Function


    Private Function LoadData(p_strSQL)
        dim rs
        set rs = LoadRSFromDB(p_strSQL)
        LoadData = FillFromRS(rs)
        rs. close
        set rs = nothing
    End Function
End Class

%>